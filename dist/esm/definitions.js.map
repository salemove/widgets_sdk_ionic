{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAsGH;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAChC,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;CACX,CAAC,CAAC;AAGH;;;;GAIG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAAC;IAChD,2BAA2B,EAAE,2BAA2B;IACxD,yBAAyB,EAAE,yBAAyB;CACvD,CAAC,CAAC;AAyBH,2DAA2D;AAC3D,MAAM,KAAW,KAAK,CAWrB;AAXD,WAAiB,KAAK;IAClB;;OAEG;IACU,YAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAChC,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE,QAAQ;QAChB,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,WAAW;KACzB,CAAC,CAAC;AAEP,CAAC,EAXgB,KAAK,KAAL,KAAK,QAWrB;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;IACnC,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,SAAS,EAAE,WAAW;CACzB,CAAC,CAAC;AA6GH,2DAA2D;AAC3D,MAAM,KAAW,iBAAiB,CAuBjC;AAvBD,WAAiB,iBAAiB;IAC9B;;;;OAIG;IACU,kCAAgB,GAAG,MAAM,CAAC,MAAM,CAAC;QAC1C,OAAO,EAAE,SAAS;QAClB,MAAM,EAAE,QAAQ;KACnB,CAAC,CAAC;IAGH;;;;OAIG;IACU,8CAA4B,GAAG,MAAM,CAAC,MAAM,CAAC;QACtD,OAAO,EAAE,SAAS;QAClB,KAAK,EAAE,OAAO;KACjB,CAAC,CAAC;AAGP,CAAC,EAvBgB,iBAAiB,KAAjB,iBAAiB,QAuBjC;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9C;;OAEG;IACH,KAAK,EAAE,OAAO;IAEd;;OAEG;IACH,GAAG,EAAE,KAAK;IAEV;;OAEG;IACH,MAAM,EAAE,QAAQ;IAEhB;;OAEG;IACH,OAAO,EAAE,SAAS;IAElB;;OAEG;IACH,QAAQ,EAAE,UAAU;CACvB,CAAC,CAAC;AAIH;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9C;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;OAEG;IACH,UAAU,EAAE,YAAY;CAC3B,CAAC,CAAC","sourcesContent":["/**\n * @fileoverview GliaWidgets SDK definitions.\n * This file contains TypeScript interfaces and types used in the Glia Ionic SDK.\n */\n\n/**\n * GliaWidgets SDK configuration.\n */\nexport interface Configuration {\n    /**\n     * The Glia site ID.\n     */\n    siteId: string;\n\n    /**\n     * @deprecated Use `queueIds` during startChat, startAudio, or startVideo instead.\n     * List of queue IDs to be used when requesting an engagement.\n     * If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n     */\n    queueIds?: string[];\n\n    /**\n     * The API key for the Glia site.\n     *\n     * @see {@link ApiKey} for more details.\n     */\n    apiKey: ApiKey;\n\n    /**\n     * The region of the site.\n     * Possible values are defined in the {@link Region}.\n     */\n    region: Region;\n\n    /**\n     * The name of the company.\n     * This is used as the company name shown in the UI while establishing a connection with an operator.\n     * The default value is `undefined`.\n     */\n    companyName?: string;\n\n    /**\n     * The name of the locale to be used instead of the default locale of the site.\n     * If not provided, the default locale will be used.\n     * The default value is `undefined`.\n     */\n    overrideLocale?: string;\n\n    /**\n     * UI customization settings in a cross-platform format.\n     * This can be a JSON object or a JSON string.\n     * The default value is `undefined`.\n     */\n    uiUnifiedConfig?: object | string;\n\n    /**\n     * ID of the PDF asset containing additional visitor context for an operator.\n     * The default value is `undefined`.\n     */\n    visitorContextAssetId?: string;\n\n    /**\n     * Push notifications environment to use.\n     * NOTE: Only for iOS.\n     * The default value is `PushNotificationsIOS.DISABLED`.\n     */\n    pushNotifications?: PushNotificationsIOS;\n\n    /**\n     * A bubble shown outside the app during an engagement when the app is not in the foreground.\n     * Available only on Android when a visitor grants Screen Overlay permission.\n     * The default value is `true`.\n     */\n    enableBubbleOutsideApp?: boolean;\n\n    /**\n     * A bubble shown within the app but outside the engagement view during an engagement.\n     * The default value is `true`.\n     */\n    enableBubbleInsideApp?: boolean;\n\n    /**\n     * Whether to suppress push notification permission request during authentication.\n     * The default value is `false`.\n     */\n    suppressPushNotificationsPermissionRequestDuringAuthentication?: boolean;\n}\n\n/**\n * Used for configuring the Glia SDK with site API key ID and secret.\n *\n * Note that for the SDK to work properly, the site API key needs to have the 'Create Visitor' permission only.\n */\nexport interface ApiKey {\n    /**\n     * The ID of the site API key.\n     */\n    id: string;\n\n    /**\n     * The site API key secret.\n     */\n    secret: string;\n}\n\n/**\n * Site's region. Use `us` for US and other regions except Europe, use `eu` for Europe.\n */\nexport const Region = Object.freeze({\n    US: 'us',\n    EU: 'eu',\n});\nexport type Region = (typeof Region)[keyof typeof Region];\n\n/**\n * Behavior for authentication and deauthentication.\n * FORBIDDEN_DURING_ENGAGEMENT - Do not allow authentication and deauthentication during an ongoing engagement. Default behavior.\n * ALLOWED_DURING_ENGAGEMENT - Allow authentication and deauthentication during an ongoing engagement.\n */\nexport const AuthenticationBehavior = Object.freeze({\n    FORBIDDEN_DURING_ENGAGEMENT: 'forbiddenDuringEngagement',\n    ALLOWED_DURING_ENGAGEMENT: 'allowedDuringEngagement',\n});\nexport type AuthenticationBehavior = (typeof AuthenticationBehavior)[keyof typeof AuthenticationBehavior];\n\n/**\n * Queue information.\n */\nexport interface Queue {\n    /**\n     * Indicates if queue is default.\n     */\n    is_default: boolean;\n\n    /**\n     * Queue media types.\n     */\n    media: MediaType[];\n\n    /**\n     * Queue name.\n     */\n    name: string;\n\n    status: Queue.Status;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Queue {\n    /**\n     * Queue status.\n     */\n    export const Status = Object.freeze({\n        OPENED: 'opened',\n        CLOSED: 'closed',\n        FULL: 'full',\n        UNSTAFFED: 'unstaffed',\n    });\n    export type Status = (typeof Status)[keyof typeof Status];\n}\n\n/**\n * Queue media types.\n */\nexport const MediaType = Object.freeze({\n    TEXT: 'text',\n    PHONE: 'phone',\n    AUDIO: 'audio',\n    VIDEO: 'video',\n    MESSAGING: 'messaging',\n});\nexport type MediaType = (typeof MediaType)[keyof typeof MediaType];\n\n/**\n * A collection of queues where:\n * - The key is the queue ID.\n * - The value is a `Queue` object that describes the queue's details.\n */\nexport type Queues = Record<string, Queue>;\n\n/**\n * The information about a visitor.\n * This information is visible to operators and can be updated by the SDK or operators.\n */\nexport interface VisitorInfo {\n    /**\n     * Visitor's name.\n     */\n    name?: string;\n\n    /**\n     * Visitor's email address.\n     */\n    email?: string;\n\n    /**\n     * Visitor's phone number.\n     */\n    phone?: string;\n\n    /**\n     * Additional notes about the visitor.\n     */\n    note?: string;\n\n    /**\n     * External ID to be used in third-party integrations.\n     */\n    externalId?: string;\n\n    /**\n     * A dictionary with custom attributes.\n     */\n    customAttributes: Record<string, string>;\n\n    /**\n     * Indicates whether the visitor is blocked.\n     */\n    banned: boolean;\n}\n\n/**\n * Used to update visitor information.\n * If some fields of visitor information are not set, they will not be updated on the server.\n */\nexport interface VisitorInfoUpdate {\n    /**\n     * Visitor's name.\n     * The default value is `undefined`.\n     */\n    name?: string;\n\n    /**\n     * Visitor's email address.\n     * The default value is `undefined`.\n     */\n    email?: string;\n\n    /**\n     * Visitor's phone number.\n     * The default value is `undefined`.\n     */\n    phone?: string;\n\n    /**\n     * Additional notes about the visitor.\n     * The default value is `undefined`.\n     */\n    note?: string;\n\n    /**\n     * The method for updating the notes about the visitor.\n     * The default value is `undefined`.\n     *\n     * @see {@link VisitorInfoUpdate.NoteUpdateMethod} for more details.\n     */\n    noteUpdateMethod?: VisitorInfoUpdate.NoteUpdateMethod;\n\n    /**\n     * External ID to be used in third-party integrations.\n     * The default value is `undefined`.\n     */\n    externalId?: string;\n\n    /**\n     * A dictionary with custom attributes.\n     * The default value is `undefined`.\n     */\n    customAttributes?: Record<string, string>;\n\n    /**\n     * The method for updating custom attributes.\n     * The default value is `undefined`.\n     *\n     * @see {@link VisitorInfoUpdate.CustomAttributesUpdateMethod} for more details.\n     */\n    customAttributesUpdateMethod?: VisitorInfoUpdate.CustomAttributesUpdateMethod;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace VisitorInfoUpdate {\n    /**\n     * Specifies a method for updating the visitor's notes.\n     * replace - The visitor's notes will be overwritten with the notes specified in the request.\n     * append - A line break (\\n) will be added, and the specified notes will be appended to the existing visitorâ€™s notes.\n     */\n    export const NoteUpdateMethod = Object.freeze({\n        REPLACE: 'replace',\n        APPEND: 'append',\n    });\n    export type NoteUpdateMethod = (typeof NoteUpdateMethod)[keyof typeof NoteUpdateMethod];\n\n    /**\n     * Specifies a method for updating the visitor's custom attributes.\n     * replace - All custom attributes for the visitor will be overwritten with the attributes specified in the request.\n     * merge - Only custom attributes present in the request will be added or updated. Custom attributes can be removed by setting their values to `null`.\n     */\n    export const CustomAttributesUpdateMethod = Object.freeze({\n        REPLACE: 'replace',\n        MERGE: 'merge',\n    });\n    export type CustomAttributesUpdateMethod =\n        (typeof CustomAttributesUpdateMethod)[keyof typeof CustomAttributesUpdateMethod];\n}\n\n/**\n * Available push notifications types.\n */\nexport const PushNotificationType = Object.freeze({\n    /**\n     * The SDK will subscribe to push notifications for when the engagement starts.\n     */\n    START: 'start',\n\n    /**\n     * The SDK will subscribe to push notifications for when the engagement ends.\n     */\n    END: 'end',\n\n    /**\n     * The SDK will subscribe to push notifications for when the engagement fails.\n     */\n    FAILED: 'failed',\n\n    /**\n     * The SDK will subscribe to push notifications for when a new message is received.\n     */\n    MESSAGE: 'message',\n\n    /**\n     * The SDK will subscribe to push notifications for when the engagement is transferred to another operator.\n     */\n    TRANSFER: 'transfer',\n});\nexport type PushNotificationType =\n    (typeof PushNotificationType)[keyof typeof PushNotificationType];\n\n/**\n * Push notifications environment for iOS.\n */\nexport const PushNotificationsIOS = Object.freeze({\n    /**\n     * Push notifications are disabled.\n     */\n    DISABLED: 'disabled',\n    /**\n     * Push notifications are configured for sandbox environment. Suitable for testing.\n     */\n    SANDBOX: 'sandbox',\n    /**\n     * Push notifications are configured for production environment.\n     */\n    PRODUCTION: 'production',\n});\n\nexport type PushNotificationsIOS =\n    (typeof PushNotificationsIOS)[keyof typeof PushNotificationsIOS];\n\nexport interface GliaSdk {\n    /**\n     * Configures GliaWidgets SDK.\n     *\n     * Note that for the SDK to work properly, the site API key needs to have the 'Create Visitor' permission only.\n     *\n     * @param configuration - {@link Configuration} options for the GliaWidgets SDK.\n     */\n    configure(configuration: Configuration): Promise<void>;\n\n    /**\n     * Subscribe to specific push notification types.\n     */\n    subscribeToPushNotificationTypes(options: {\n        /**\n         * An array of push notification types to subscribe to.\n         * @see {@link PushNotificationType} for more details.\n         */\n        types: PushNotificationType[];\n    }): Promise<void>;\n\n    /**\n     * @deprecated Use showEntryWidget() instead.\n     * Shows Entry Widget.\n     */\n    presentEntryWidget(): Promise<void>;\n\n    /**\n     * Shows Entry Widget.\n     */\n    showEntryWidget(options: {\n        /**\n         * List of queue IDs to be used when requesting an engagement. If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n         */\n        queueIds?: string[];\n    }): Promise<void>;\n\n    /**\n     * Hides Entry Widget.\n     */\n    hideEntryWidget(): Promise<void>;\n\n    /**\n     * Starts a new chat engagement.\n     */\n    startChat(options?: {\n        /**\n         * List of queue IDs to be used when requesting an engagement. If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n         * Pay attention: `queueIds` could have been set using the deprecated `configure` parameter.\n         */\n        queueIds?: string[];\n    }): Promise<void>;\n\n    /**\n     * Starts a new audio engagement.\n     */\n    startAudio(options?: {\n        /**\n         * List of queue IDs to be used when requesting an engagement. If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n         * Pay attention: `queueIds` could have been set using the deprecated `configure` parameter.\n         */\n        queueIds?: string[];\n    }): Promise<void>;\n    /**\n     * Starts a new video engagement.\n     */\n    startVideo(options?: {\n        /**\n         * List of queue IDs to be used when requesting an engagement. If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n         * Pay attention: `queueIds` could have been set using the deprecated `configure` parameter.\n         */\n        queueIds?: string[];\n    }): Promise<void>;\n\n    /**\n     * @deprecated Use `startSecureMessaging` instead.\n     * Starts a Secure Conversation flow.\n     * Note that Secure Conversation requires visitor authentication.\n     */\n    startSecureConversation(): Promise<void>;\n\n    /**\n     * Starts a Secure Conversation flow.\n     * Note that Secure Conversation requires visitor authentication.\n     */\n    startSecureMessaging(options: {\n        /**\n         * List of queue IDs to be used when requesting an engagement. If `queueIds` is undefined or empty, the visitor is enqueued in the default queue(s).\n         */\n        queueIds?: string[];\n    }): Promise<void>;\n\n    /**\n     * Clears current Glia SDK session, and also resets the visitor ID and their local data.\n     * Ends ongoing engagement (if any).\n     */\n    clearVisitorSession(): Promise<void>;\n\n    /**\n     * @deprecated Use getQueues() instead.\n     * Fetches all queues with its info for current site.\n     */\n    listQueues(): Promise<any>;\n\n    /**\n     * Fetches all queues and their information for the current site.\n     * @returns {Promise<Queues>} - A collection of queues where the key is the queue ID and the value is a `Queue` object that describes the queue's details.\n     */\n    getQueues(): Promise<Queues>;\n\n    /**\n     * @deprecated Use showVisitorCode() instead.\n     * Presents GliaWidgets UI with a visitor code for sharing with operator to start an engagement.\n     */\n    showVisitorCodeViewController(): Promise<void>;\n\n    /**\n     * Presents GliaWidgets UI with a visitor code for sharing with operator to start an engagement.\n     */\n    showVisitorCode(): Promise<void>;\n\n    /**\n     * Authenticates the visitor.\n     * @param options - Provides options for authentication such as behavior, idToken, and accessToken.\n     */\n    authenticate(options: {\n        /**\n         * Controls authentication during an engagement.\n         * @see {@link AuthenticationBehavior} for more details.\n         */\n        behavior: AuthenticationBehavior;\n\n        /**\n         * JWT token (Direct ID token) for visitor authentication.\n         */\n        idToken: string;\n\n        /**\n         * An access token that can be used to make authenticated requests to other systems on behalf of the authenticated visitor.\n         * The default value is `undefined`.\n         */\n        accessToken?: string;\n    }): Promise<void>;\n\n    /**\n     * Deauthenticates the visitor. Be aware that deauthentication process relies on `AuthenticationBehavior`.\n     * @param options - Provides options to stop push notifications on deauthentication.\n     */\n    deauthenticate(options?: {\n        /**\n         * Whether to unsubscribe the visitor from receiving push notifications on deauthentication.\n         */\n        stopPushNotifications: boolean;\n    }): Promise<void>;\n\n    /**\n     * Provides the current authentication state.\n     */\n    isAuthenticated(): Promise<boolean>;\n\n    /**\n     * Renews visitor authentication.\n     */\n    refreshAuthentication(options: {\n        /**\n         * JWT token (Direct ID token) for visitor authentication.\n         */\n        idToken: string;\n\n        /**\n         * An access token that can be used to make authenticated requests to other systems on behalf of the authenticated visitor.\n         * The default value is `undefined`.\n         */\n        accessToken?: string;\n    }): Promise<void>;\n\n    /**\n     * Pauses the ongoing LiveObservation session.\n     */\n    pauseLiveObservation(): Promise<void>;\n\n    /**\n     * Resumes the paused LiveObservation session.\n     */\n    resumeLiveObservation(): Promise<void>;\n\n    /**\n     * Fetches the visitor information.\n     * @returns VisitorInfo - The information about a visitor.\n     */\n    getVisitorInfo(): Promise<VisitorInfo>;\n\n    /**\n     * Updates the visitor information.\n     */\n    updateVisitorInfo(visitorInfo: VisitorInfoUpdate): Promise<void>;\n\n    /**\n     * Ends the current engagement.\n     */\n    endEngagement(): Promise<void>;\n}\n"]}