{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface ApiKey {\n  id: string;\n  secret: string;\n}\n\n/**\n * Site's region.\n */\nexport type Region = 'us' | 'eu' | 'beta';\n\n/**\n * Authentication (IdToken) behavior.\n * forbiddenDuringEngagement - Prevent creation a new engagement if ongoing engagement exists. Default behavior.\n * allowedDuringEngagement - Allows creation a new engagement if ongoing engagement exists. During this behavior original engagement will be ended and a new engagement engagement will be restarted with the same operator after authentication is succeded.\n */\nexport type AuthenticationBehavior = 'forbiddenDuringEngagement' | 'allowedDuringEngagement';\n\n/**\n * Start screen for Secure Conversation flow.\n */\nexport type SecureConversationStartScreen = 'welcome' | 'chatTranscript';\nexport interface GliaSdkPlugin {\n  /**\n   * configures GliaWidgets SDK with credentials.\n   *\n   * NB! To make plugin work properly, use `create-visitor` credentials for Site APIKey only.\n   */\n  configure(options: {\n    siteId: string;\n    apiKey: ApiKey;\n    region: Region;\n    companyName: string;\n    overrideLocale?: string;\n  }): Promise<void>;\n\n  /**\n   * Starts a new chat/text engagement with queue identifiers. If `queueIds` is null or empty, creates engagement for default queue.\n   */\n  startChat(options: { queueIds?: string[] }): Promise<void>;\n  /**\n   * Starts a new audio engagement with queue identifiers. If `queueIds` is null or empty, creates engagement for default queue.\n   */\n  startAudio(options: { queueIds?: string[] }): Promise<void>;\n  /**\n   * Starts a new video engagement for queue identifiers. If `queueIds` is null or empty, creates engagement for default queue.\n   */\n  startVideo(options: { queueIds?: string[] }): Promise<void>;\n\n  /**\n   * Starts Secure Conversation flow with passed `start screen`.\n   * Secure Conversation requires authentication/IdToken.\n   */\n  startSecureConversation(options: { startScreen: SecureConversationStartScreen }): Promise<void>;\n\n  /**\n   * Recreates currently used visitor in SDK.\n   */\n  clearVisitorSession(): Promise<void>;\n\n  /**\n   * Fetches all queues with its info for current site.\n   */\n  listQueues(): Promise<any>;\n\n  /**\n   * Presents GliaWidgets UI with visitor code for sharing with operator to start an engagement.\n   */\n  showVisitorCodeViewController(): Promise<void>;\n\n  /**\n   * Authenticates visitor.\n   * @param options - Provides options for authentication such as behavior, idToken, and accessToken.\n   */\n  authenticate(options: { behavior: AuthenticationBehavior; idToken: string; accessToken?: string }): Promise<void>;\n\n  /**\n   * Deauthenticates visitor. Be aware that deauthentication process relies on `AuthenticationBehavior`\n   */\n  deauthenticate(): Promise<void>;\n\n  /**\n   * Provides current authentication state\n   */\n  isAuthenticated(): Promise<void>;\n\n  /**\n   * Refreshes authentication access properties.\n   */\n  refreshAuthentication(options: { idToken: string; accessToken?: string }): Promise<void>;\n\n  /**\n   * Makes a pause for ongoing LiveObservation session.\n   */\n  pauseLiveObservation(): Promise<void>;\n  /**\n   * Resumes ongoing LiveObservation session.\n   */\n  resumeLiveObservation(): Promise<void>;\n}\n"]}